from index import CMD2_PREDICT, bootstrap
import pandas as pd
import glob


ID_POSITIF = [10409, 9073, 9551, 9693, 10409, 10181, 9029, 9213, 9911, 10376]

ID_NEGATIF = [6106, 6639, 6832, 6996, 7278]

ID_JUNI_POSITIF = [5520, 5524, 5536, 5565, 5567, 5573, 5576, 5590, 5591, 5632, 5648, 5653, 5654, 5658, 5662, 5678, 5680, 5681, 5682, 5683, 5704, 5718, 5720, 5731, 5734, 5738, 5744, 5766, 5767, 5768, 5786, 5787, 5788, 5802, 5806, 5807, 5812, 5823, 5824, 5827, 5828, 5837, 5841, 5842, 5843, 5856, 5868, 5873, 5899, 5910, 5913, 5919, 5922, 5931, 5952, 5954, 5960, 5964, 5969, 5972, 5973, 5975, 5984, 5985, 5988, 5989, 5990, 5991, 5992, 5994, 6015, 6020, 6021, 6030, 6040, 6055, 6069, 6073, 6089, 6091, 6097, 6100, 6101, 6102, 6138, 6182, 6183, 6190, 6199, 6200, 6201, 6208, 6210, 6223, 6225, 6226, 6229, 6270, 6276, 6286, 6287, 6295, 6300, 6317, 6320, 6325, 6327, 6398, 6408, 6414, 6418, 6426, 6444, 6447, 6451, 6454, 6458, 6459, 6460, 6461, 6478, 6482, 6485, 6488, 6489, 6493, 6494, 6503, 6504, 6506, 6507, 6533, 6534, 6535, 6540, 6543, 6544, 6581, 6584, 6585, 6587, 6626, 6630, 6631, 6632, 6635, 6638, 6640, 6641, 6642, 6648, 6649, 6651, 6652, 6655, 6658, 6659, 6661, 6662, 6665, 6666, 6696, 6712, 6713, 6719, 6720, 6723, 6724, 6728, 6729, 6731, 6733, 6735, 6755, 6756, 6758, 6762, 6767, 6770, 6792, 6795, 6802, 6840, 6844, 6846, 6847, 6851, 6855, 6914, 6918, 6919, 6920, 6933, 6955, 6957, 6963, 6982, 6984, 6985, 6986, 6993, 6995, 7001, 7002, 7003, 7004, 7005, 7062, 7072, 7074, 7075, 7077, 7078, 7080, 7081, 7098, 7100, 7101, 7105, 7107, 7126, 7130, 7131, 7147, 7149, 7150, 7154, 7156, 7158, 7177, 7179, 7183, 7189, 7194, 7210, 7224, 7247, 7256, 7261, 7271, 7272, 7279, 7282, 7289, 7292, 7295, 7297, 7301, 7303, 7309, 7311, 7314, 7322, 7323, 7330, 7337, 7342, 7345, 7348, 7353, 7357, 7367, 7383, 7393, 7394, 7399, 7402, 7404, 7413, 7418, 7420, 7434, 7439, 7443, 7484, 7487, 7488, 7498, 7501, 7520, 7522, 7528, 7530, 7542, 7546, 7547, 7551, 7563, 7585, 7586, 7594, 7596, 7597, 7599, 7600, 7602, 7606, 7608, 7611, 7614, 7615, 7624, 7628, 7629, 7640, 7641, 7647, 7664, 7665, 7672, 7681, 7684, 7685, 7692, 7693, 7695, 7696, 7698, 7700, 7701, 7716, 7723, 7727, 7728, 7783, 7795, 7796, 7798, 7799, 7805, 7808, 7813, 7816, 7821, 7822, 7827, 7830, 7833, 7840, 7842, 7845, 7848, 7851, 7855, 7856, 7859, 7863, 7864, 7867, 7870, 7871, 7874, 7880, 7884, 7885, 7891, 7896, 7897, 7898, 7900, 7903, 7909, 7912, 7913, 7914, 7915, 7916, 7955, 7960, 7963, 7964, 7992, 7996, 8006, 8008, 8009, 8012, 8015, 8018, 8019, 8027, 8030, 8032, 8048, 8049, 8051, 8054, 8057, 8058, 8062, 8064, 8066, 8071, 8072, 8073, 8112, 8116, 8129, 8131, 8141, 8152, 8153, 8158, 8165, 8166, 8167, 8171, 8172, 8175, 8177, 8189, 8195, 8196, 8201, 8214, 8216, 8217, 8220, 8224, 8235, 8236, 8244, 8249, 8257, 8258, 8264, 8269, 8278, 8281, 8283, 8287, 8294, 8295, 8302, 8304, 8305, 8309, 8311, 8313, 8315, 8337, 8347, 8357, 8381, 8382, 8385, 8399, 8401, 8404, 8408, 8409, 8417, 8418, 8420, 8422, 8424, 8425, 8428, 8430, 8434, 8436, 8442, 8444, 8446, 8447, 8448, 8449, 8451, 8452, 8453, 8455, 8456, 8458, 8460, 8461, 8463, 8468, 8469, 8470, 8504, 8512, 8524, 8528, 8529, 8530, 8536, 8540, 8541, 8545, 8546, 8549, 8551, 8554, 8555, 8557, 8559, 8560, 8561, 8562, 8570, 8597, 8600, 8604, 8629, 8661, 8663, 8680, 8682, 8684, 8696, 8698, 8700, 8712, 8715, 8720, 8726, 8727, 8753, 8755, 8758, 8767, 8770, 8774, 8780, 8784, 8788, 8789, 8792, 8794, 8795, 8796, 8797, 8802, 8807, 8808, 8815, 8817, 8827, 8840, 8847]

ID_BARU = [10242, 7173, 10247, 10762, 10251, 10763, 10765, 7180, 9975, 9976, 10257, 7186, 10264, 10779, 10268, 7199, 10276, 6700, 6701, 7213, 9271, 9276, 9279, 9986, 9285, 9987, 9290, 10315, 9292, 10318, 9295, 10321, 9989, 8275, 10323, 9299, 6742, 9301, 9990, 9305, 10331, 9819, 9820, 9991, 9311, 9312, 9313, 9825, 9315, 9316, 9317, 9318, 9827, 9830, 9321, 9322, 10347, 9831, 10349, 10350, 9832, 10352, 10353, 10354, 10355, 10356, 10357, 10358, 10359, 10361, 10362, 10385, 10387, 10391, 10393, 10403, 8869, 8875, 9387, 10413, 10414, 10415, 10416, 8368, 10418, 10419, 10420, 8881, 8885, 9396, 8376, 8377, 10426, 9401, 9402, 9403, 9404, 9917, 10432, 9919, 10434, 9921, 9923, 9924, 8902, 8903, 9929, 9931, 10444, 9932, 9934, 8911, 10448, 9423, 10450, 10451, 10452, 8916, 10454, 10455, 9935, 10457, 10458, 9938, 9939, 8925, 9438, 9944, 8928, 9950, 9951, 9445, 9959, 9960, 9449, 8940, 9965, 8942, 10479, 8944, 10481, 10482, 8435, 10483, 8945, 10486, 8947, 6902, 8952, 10490, 10491, 10492, 6904, 10494, 10495, 9465, 9470, 9474, 9979, 9980, 9982, 9478, 9983, 9984, 9481, 9985, 9483, 9484, 9988, 9486, 9487, 6928, 9992, 9994, 9491, 9492, 9493, 9494, 9495, 10231, 10232, 6940, 9501, 5921, 10530, 5923, 10532, 10023, 8488, 8489, 10026, 9515, 7979, 9517, 10028, 10029, 10025, 7984, 8498, 10547, 5940, 10550, 9526, 10038, 9529, 10554, 10040, 9532, 10557, 10558, 10559, 10560, 10561, 7485, 10563, 10564, 10565, 10566, 10567, 10568, 9537, 10570, 7490, 10052, 10054, 10055, 10056, 10576, 10057, 10059, 10060, 10061, 10063, 10064, 7511, 10069, 8021, 10072, 9940, 10042, 9941, 8034, 10044, 10046, 9595, 10048, 9597, 10050, 6031, 6042, 9119, 9129, 6574, 9134, 6580, 10683, 10684, 10685, 10686, 10687, 9148, 9153, 10690, 9665, 9669, 9158, 9159, 9676, 9679, 9168, 9680, 9172, 9177, 9690, 9457, 9182, 9966, 9699, 9701, 9707, 9709, 9710, 9711, 9712, 9461, 9713, 9714, 10224, 10227, 10228, 9971, 10230, 10234, 10235, 9972]

ID_523 = [9124, 10030, 10504, 10036, 9304, 9681, 9655, 10184, 9558, 10422, 9593, 10240, 9114, 9120, 9562, 9648, 9456, 9211, 10705, 10348, 10587, 9213, 9530, 8986, 10166, 10376, 10282, 9614, 9275, 9554, 9365, 9973, 10588, 8954, 10067, 10174, 8987, 10382, 9334, 9572, 10164, 10373, 10477, 9837, 10071, 10073, 10187, 8981, 10370, 9364, 9202, 10192, 10712, 9042, 10703, 9122, 10521, 10506, 9609, 9186, 10658, 10771, 9570, 9359, 10177, 9996, 9332, 9738, 9948, 9748, 9575, 10161, 10577, 9199, 9607, 9073, 9040, 9969, 10505, 9964, 9123, 8984, 9509, 10279, 9091, 10366, 9836, 8924, 9447, 9243, 9557, 9844, 6202, 6057, 7663, 7613, 7591, 6206, 7843, 6278, 5805, 5938, 8395, 8848, 8056, 7152, 6861, 9538, 8421, 10022, 7007, 6484, 6281, 6989, 8228, 6829, 7099, 8047, 5553, 6505, 5826, 8761, 6961, 9233, 5745, 6539, 5607, 6949, 7717, 5883, 6727, 6639, 7784, 7733, 7619, 7699, 7646, 7688, 7278, 7356, 5810, 7514, 6953, 7043, 7694, 7033, 6569, 6835, 5747, 7773, 6791, 7310, 6575, 6103, 6736, 6291, 9728, 10241, 9736, 9226, 9234, 10770, 10772, 10773, 10263, 9240, 9241, 10266, 10269, 10271, 10278, 10280, 10281, 10283, 10286, 9266, 10291, 10295, 10296, 10301, 9280, 9287, 9298, 10327, 10330, 9309, 10334, 9824, 10337, 9320, 9835, 9326, 9329, 9841, 9846, 9335, 9848, 9337, 9339, 10364, 10365, 9341, 10368, 10374, 10378, 9356, 9357, 10380, 10381, 9360, 10383, 10389, 9371, 9372, 9887, 10402, 9379, 8871, 9384, 10409, 10412, 9394, 9911, 9912, 8889, 8890, 9913, 8893, 9405, 8896, 10439, 9427, 8921, 10460, 9952, 10466, 9443, 10467, 9956, 9957, 9963, 10485, 8956, 8959, 10499, 10500, 8965, 10503, 8969, 10508, 8973, 10510, 9998, 10000, 10004, 8983, 10520, 10522, 10526, 8992, 10528, 9508, 9511, 10537, 10543, 10031, 9009, 9017, 9024, 9026, 9028, 9029, 9032, 9033, 9034, 9035, 10569, 9037, 9038, 9551, 10575, 10066, 9555, 9556, 9045, 10582, 10583, 9048, 9560, 10584, 10075, 10074, 10068, 9567, 10082, 10083, 9574, 9577, 9580, 9583, 9074, 9079, 9592, 9594, 9596, 9087, 9601, 9093, 9605, 9611, 9613, 9106, 9629, 9632, 9121, 9634, 9636, 9639, 10664, 10665, 9642, 10666, 10157, 10159, 10160, 9649, 9650, 9651, 9652, 9653, 9654, 10163, 9656, 10165, 10171, 10173, 9152, 10178, 10179, 10180, 10181, 10182, 10700, 10188, 10189, 10190, 10708, 10709, 10713, 10714, 10715, 9180, 9692, 9693, 9694, 10716, 10718, 9188, 9194, 9196, 9197, 9198, 10220, 9200, 9204, 9205, 9717, 9212, 10237, 10750, 6660, 6668, 8213, 10775, 5664, 7712, 5669, 5677, 6189, 6198, 6711, 8760, 6203, 7228, 6204, 8769, 8259, 8262, 6221, 8782, 7249, 5716, 7252, 6744, 7258, 7770, 7268, 6760, 7273, 8298, 5741, 7283, 6775, 7288, 8830, 7806, 8320, 6280, 5769, 7304, 7305, 6796, 6797, 8849, 6290, 6294, 7318, 9366, 5789, 5791, 9377, 6832, 6323, 6324, 8375, 7865, 6842, 7877, 6857, 7883, 7372, 6866, 7890, 5847, 5849, 7899, 5872, 7414, 9466, 8443, 5889, 5895, 6921, 8457, 6416, 10001, 7954, 6422, 6423, 5912, 7452, 5929, 6445, 6959, 6452, 6965, 6455, 7491, 6469, 7493, 5963, 6476, 5965, 6991, 6996, 10079, 9569, 5987, 7523, 6501, 8050, 9589, 9085, 7552, 8065, 6538, 8074, 7053, 6542, 5519, 5521, 5522, 6035, 10132, 5532, 7580, 7071, 7583, 5537, 6049, 5539, 6050, 5541, 6051, 6054, 6056, 6566, 7082, 5554, 6578, 5556, 10162, 5566, 5574, 5577, 7625, 7627, 7633, 8146, 7127, 7129, 6106, 5596, 8157, 8159, 7652, 7141, 7654, 7145, 7155, 7157, 5625, 6650]

ID_COBA = [5520]

def main():
    boot = bootstrap()

    pred = len(ID_BARU)
    # For example, we take the data from csv
    allData = pd.read_csv("../all-data/CSV-generate/all-dat-full.csv") #Dari All Data
    
    predik = ""
    data_positif = 0
    data_negatif = 0
    threshold_predik = 0.5

    TP = 0
    TN = 0
    FP = 0
    FN = 0
    for samplingId in ID_BARU:
        data = allData[allData['sampling_id'] == samplingId] #10181: Valid, Positif
        status_real = data.covid_status.unique()[0]
        # Convert them to dataframe
        # with header 'MQ2_ADC', 'MQ3_ADC', 'MQ4_ADC', 'TGS2610_ADC', 'TGS2600_ADC', 'TGS822_ADC', 'MQ137_ADC', 'MQ138_ADC'
        data = data.loc[:,['PROCESS', 'MQ2_ADC', 'MQ3_ADC', 'MQ4_ADC', 'TGS2610_ADC', 'TGS2600_ADC', 'TGS822_ADC', 'MQ137_ADC', 'MQ138_ADC']]    

        # Split the PROCESS
        (valid, covid) = CMD2_PREDICT(
            boot, 
            data[data['PROCESS'] == 'P1'],
            data[data['PROCESS'] == 'P2'],
            data[data['PROCESS'] == 'P3'],
        )

        covid_status = covid.round() 
        if(status_real == 0 and covid < threshold_predik):
            predik = "True Negatif"
            TN += 1
            data_negatif += 1
        elif(status_real == 0 and covid >= threshold_predik):
            predik = "False Positif"
            FP += 1
            data_negatif += 1
        elif(status_real == 1 and covid >= threshold_predik):
            predik = "True Positif"
            TP += 1
            data_positif += 1
        elif(status_real == 1 and covid < threshold_predik):
            predik = "False Negatif"
            FN += 1
            data_positif += 1
        
        print("Sampling: ", samplingId, end="; ")
        print(predik, "; ", valid,"; ", covid)

    sens = 1
    if ((TP + FN) != 0):
        sens = TP/(TP + FN)
    spec = 1
    if ((TN + FP) != 0):
        spec = TN/(TN + FP)
    ba = (sens+spec)/2
    acc = (TP + TN) / (TP + TN + FP + FN)

    print("========== SUMMARY ============")
    print("[INFO] Jumlah Data Testing: ", str((pred)))
    print("[INFO] Jumlah Data POSITIF (209): ", str((data_positif)))
    print("[INFO] Jumlah Data NEGATIF (86): ", str((data_negatif)))
    print("[INFO] THRESHOLD PREDIK: ", str((threshold_predik)))
    print("[INFO] Jumlah TP: ", str((TP)))
    print("[INFO] Jumlah TN: ", str((TN)))
    print("[INFO] Jumlah FP: ", str((FP)))
    print("[INFO] Jumlah FN: ", str((FN)))
    print("[INFO] Accuracy Testing: ", str(acc))
    print("[INFO] Specificity Testing: ", str(spec))
    print("[INFO] Sensitivity Testing: ", str(sens))
    print("[INFO] Balanced Accuracy Testing: ", str(ba))
    
    # print("=== PREDIK NEGATIF ===")
    # benarNeg = 0
    # for samplingId in ID_NEGATIF:
    #     data = allData[allData['sampling_id'] == samplingId] #10181: Valid, Positif

    #     # Convert them to dataframe
    #     # with header 'MQ2_ADC', 'MQ3_ADC', 'MQ4_ADC', 'TGS2610_ADC', 'TGS2600_ADC', 'TGS822_ADC', 'MQ137_ADC', 'MQ138_ADC'
    #     data = data.loc[:,['PROCESS', 'MQ2_ADC', 'MQ3_ADC', 'MQ4_ADC', 'TGS2610_ADC', 'TGS2600_ADC', 'TGS822_ADC', 'MQ137_ADC', 'MQ138_ADC']]    

    #     # Split the PROCESS
    #     (valid, covid) = CMD2_PREDICT(
    #         boot, 
    #         data[data['PROCESS'] == 'P1'],
    #         data[data['PROCESS'] == 'P2'],
    #         data[data['PROCESS'] == 'P3'],
    #     )
    #     if(covid<0.5):
    #         predik = "Negatif"
    #         benarNeg += 1
    #     else:
    #         predik = "False Positif"
        
    #     print("Sampling: ", samplingId, end="; ")
    #     print(predik, "; ", valid,"; ", covid)

    # print("=== Summary ===")
    # print("Jumlah Data Positif : ", totalPos)
    # print("Jumlah Data Negatif : ", totalNeg)
    # print("TP : ", benarPos)
    # print("TN : ", benarNeg)

def predikBinary():
    boot = bootstrap()
    jumlah_data = 0

    predik = ""
    data_positif = 0
    data_negatif = 0
    threshold_predik = 0.5

    TP = 0
    TN = 0
    FP = 0
    FN = 0

    for file in glob.glob("../convert-to-binary/DataCSV/01092021/*.csv"): #Dari Binary
        data = pd.read_csv(file)
        jumlah_data += 1

        
        status_real = 0
        samplingId = data.sampling_id.unique()[0]
        # Convert them to dataframe
        # with header 'MQ2_ADC', 'MQ3_ADC', 'MQ4_ADC', 'TGS2610_ADC', 'TGS2600_ADC', 'TGS822_ADC', 'MQ137_ADC', 'MQ138_ADC'
        data = data.loc[:,['PROCESS', 'MQ2_ADC', 'MQ3_ADC', 'MQ4_ADC', 'TGS2610_ADC', 'TGS2600_ADC', 'TGS822_ADC', 'MQ137_ADC', 'MQ138_ADC']]    

        # Split the PROCESS
        (valid, covid) = CMD2_PREDICT(
            boot, 
            data[data['PROCESS'] == 'P1'],
            data[data['PROCESS'] == 'P2'],
            data[data['PROCESS'] == 'P3'],
        )

        covid_status = covid.round() 
        if(status_real == 0 and covid < threshold_predik):
            predik = "True Negatif"
            TN += 1
            data_negatif += 1
        elif(status_real == 0 and covid >= threshold_predik):
            predik = "False Positif"
            FP += 1
            data_negatif += 1
        elif(status_real == 1 and covid >= threshold_predik):
            predik = "True Positif"
            TP += 1
            data_positif += 1
        elif(status_real == 1 and covid < threshold_predik):
            predik = "False Negatif"
            FN += 1
            data_positif += 1
        
        print("Sampling: ", samplingId, end="; ")
        print(predik, "; ", valid,"; ", covid)

    sens = 1
    if ((TP + FN) != 0):
        sens = TP/(TP + FN)
    spec = 1
    if ((TN + FP) != 0):
        spec = TN/(TN + FP)
    ba = (sens+spec)/2
    acc = (TP + TN) / (TP + TN + FP + FN)

    print("========== SUMMARY ============")
    print("[INFO] Jumlah Data Predik: ", str((jumlah_data)))
    print("[INFO] THRESHOLD PREDIK: ", str((threshold_predik)))
    print("[INFO] Jumlah TP: ", str((TP)))
    print("[INFO] Jumlah TN: ", str((TN)))
    print("[INFO] Jumlah FP: ", str((FP)))
    print("[INFO] Jumlah FN: ", str((FN)))
    print("[INFO] Accuracy Testing: ", str(acc))
    print("[INFO] Specificity Testing: ", str(spec))
    print("[INFO] Sensitivity Testing: ", str(sens))
    print("[INFO] Balanced Accuracy Testing: ", str(ba))

if __name__ == "__main__":
    # predikBinary()
    main()